import net.darkhax.curseforgegradle.TaskPublishCurseForge

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
    }
}

plugins {
    id 'idea'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'com.modrinth.minotaur' version '2.+'
	id 'java'
}

apply plugin: 'net.minecraftforge.gradle'

archivesBaseName = "${mod_id}-forge-${forge_supported_versions}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: 'official', version: forge_minecraft_version

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

    }
}

repositories {
	mavenCentral()
	maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_minecraft_version}-${forge_version}"

	// THERMAL FOUNDATION
	if (project.hasProperty('cofh_core_version')) {
		implementation fg.deobf("curse.maven:cofh-core-69162:${cofh_core_version}")
		if (project.hasProperty('thermal_foundation_version')) {
			implementation fg.deobf("curse.maven:thermal-foundation-222880:${thermal_foundation_version}")
		}
	}
	
}

processResources {
	exclude '.cache'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            file: 'META-INF/mods.toml',
            version: version
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = file('../API Tokens/noblazeknockback.md')
    def projectId = "${cf_id}".toString()
    def mainFile = upload(projectId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file('changelog.md')
    mainFile.addGameVersion('Client', 'Server')
    mainFile.releaseType = "${release_type}"
    "${forge_release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile.addOptional("thermal-foundation")
}

modrinth {
    token = file('../API Tokens/modrinth.md').text
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('changelog.md').text
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    gameVersions = "${forge_release_versions}".split(",") as List<String>
    dependencies {
        optional.project "thermal-foundation"
    }
}